# -*- coding: utf-8 -*-
"""Actualizar_Cuentas_Notion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ewiWOg_3viMWInfWcoY6rUtiRrJEB5h
"""

import requests
import json

# üöÄ API Key de Notion (‚ö†Ô∏è NO compartir p√∫blicamente)
NOTION_API_KEY = "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"  # Reempl√°zala con tu API Key

# üìå ID de la Base de Datos de Ingresos
DATABASE_ID = "184343ed53ab80bb8b1fff6207c37c1a"  # ID de la base de ingresos

# üìå ID de la Base de Datos de Cuentas
CUENTAS_DATABASE_ID = "18d343ed53ab8067929ec2c836a126a4"  # ID de la base de cuentas

# üîó URLs de la API de Notion
NOTION_URL = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
CUENTAS_URL = f"https://api.notion.com/v1/databases/{CUENTAS_DATABASE_ID}/query"

# üè¶ Encabezados para la autenticaci√≥n
HEADERS = {
    "Authorization": f"Bearer {NOTION_API_KEY}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28",
}

def get_notion_data():
    """Obtiene todas las filas de la base de datos de Ingresos"""
    response = requests.post(NOTION_URL, headers=HEADERS)

    if response.status_code == 200:
        return response.json()
    else:
        print("‚ùå Error obteniendo datos de Notion:", response.text)
        return None

def get_cuenta_id(metodo_pago):
    """Busca el ID de la cuenta en la base de datos 'Cuentas' seg√∫n el M√©todo de Pago"""
    response = requests.post(CUENTAS_URL, headers=HEADERS)

    if response.status_code == 200:
        cuentas_data = response.json()

        # üîç Imprimir toda la respuesta JSON de Notion para depuraci√≥n
        print("üîç Respuesta completa de Notion (Cuentas):")
        print(json.dumps(cuentas_data, indent=4))

        for cuenta in cuentas_data["results"]:
            try:
                # Verificar la clave 'properties' y 'M√©todo de Pago' en la estructura
                if "properties" in cuenta and "M√©todo de Pago" in cuenta["properties"]:
                    metodo_pago_cuenta = cuenta["properties"]["M√©todo de Pago"]["title"]

                    if metodo_pago_cuenta:
                        nombre_cuenta = metodo_pago_cuenta[0]["text"]["content"]
                        print(f"üÜî {cuenta['id']} - {nombre_cuenta}")  # Imprime nombres de las cuentas

                        if nombre_cuenta == metodo_pago:
                            return cuenta["id"]  # Devuelve el ID de la cuenta correcta

            except (KeyError, IndexError, TypeError) as e:
                print(f"‚ö†Ô∏è Error procesando la cuenta: {cuenta}. Detalles: {e}")

    print(f"‚ö†Ô∏è No se encontr√≥ una cuenta con el nombre '{metodo_pago}' en la tabla Cuentas.")
    return None

def update_notion_page(page_id, cuenta_id):
    """Actualiza la columna 'Cuentas' con la relaci√≥n correcta"""
    update_url = f"https://api.notion.com/v1/pages/{page_id}"

    payload = {
        "properties": {
            "Cuentas": {
                "relation": [{"id": cuenta_id}]
            }
        }
    }

    response = requests.patch(update_url, headers=HEADERS, data=json.dumps(payload))

    if response.status_code == 200:
        print(f"‚úÖ P√°gina {page_id} actualizada con cuenta {cuenta_id}")
    else:
        print(f"‚ùå Error actualizando {page_id}: {response.text}")

def main():
    """Funci√≥n principal que obtiene los datos y actualiza Notion"""
    data = get_notion_data()

    if not data:
        return

    for page in data["results"]:
        page_id = page["id"]
        metodo_pago = page["properties"].get("M√©todo de Pago", {}).get("select", {}).get("name", "")

        if metodo_pago:
            cuenta_id = get_cuenta_id(metodo_pago)
            if cuenta_id:
                update_notion_page(page_id, cuenta_id)
            else:
                print(f"‚ö†Ô∏è No se encontr√≥ una cuenta con el nombre '{metodo_pago}' en la tabla Cuentas.")

if __name__ == "__main__":
    main()